/************************************************************************************
 *                             PREPROCESSOR DIRECTIVES                              *
 ************************************************************************************/
#include <sys/ioctl.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER_SIZE 30 
#define MAX_WIDTH 4096
/************************************************************************************
 *                               INITIAL DECLARATIONS                               *
 ************************************************************************************/
typedef struct Node {
  char word[BUFFER_SIZE - 1]; /* trimmed input */
  struct Node *less_than;     /* pointer to lesser g */
  struct Node *greater_than;  /* pointer to greater g */
} Node;                       /* models a node in a generic tree of sorted strings */

typedef struct Boolean {
  unsigned int is_true : 1;
} Boolean;

const unsigned int NODE_SIZE = sizeof(Node); /* used with 'malloc' to initialize new g */

/************************************************************************************
 *                               FUNCTION PROTOTYPES                                *
 ************************************************************************************/
/* top level */
void init_root(Node *root, char *buffer, int buffer_size);
void populate_tree(Node *root, char *buffer, int buffer_size);
void print_tree(Node *root);
/* helpers */
void gets_next_word(char *buffer, int buffer_size);
void insert_next(Node *node, const char *next_word, int level);
void print_next(int num_nodes, Node *nodes[], int total_column_width);



/************************************************************************************
 *                                  MAIN FUNCTION                                   *
 ************************************************************************************/
int main(void)
{
  Node *root;               /* root node */
  char buffer[BUFFER_SIZE]; /* input buffer */

  init_root(root, buffer, BUFFER_SIZE);

  populate_tree(root, buffer, BUFFER_SIZE);

  print_tree(root);

  return 0;
}

/************************************************************************************
 *                               TOP LEVEL FUNCTIONS                                *
 ************************************************************************************/
void init_root(Node *root, char *buffer, int buffer_size)
{
  gets_next_word(buffer, buffer_size);

  if (buffer[0] == '\0') {
    exit(0);
  }

  strcpy(root -> word, buffer);
  root -> less_than    = NULL;
  root -> greater_than = NULL;
}


void populate_tree(Node *root, char *buffer, int buffer_size)
{
  Boolean ansi_invert;

  while (1) {
    printf("******************************\n\n");

    if (ansi_invert.is_true) {
      printf("\e[7m");
    }

    gets_next_word(buffer, BUFFER_SIZE);

    if (buffer[0] == '\0') {
      return;
    }

    printf("\n");

    insert_next(root, buffer, 0);

    printf("\e[0m\n******************************\n");

    ansi_invert.is_true = ~ansi_invert.is_true;
  }
}


void print_tree(Node *root)
{
  struct winsize window;
  ioctl(STDOUT_FILENO, TIOCGWINSZ, &window);

  printf("\e[0m\e[2J\e[7m"); /* reset ANSI => clear window => inverse ANSI */

  print_next(1, &root, window.ws_col);
}

/************************************************************************************
 *                                HELPER FUNCTIONS                                  *
 ************************************************************************************/
void gets_next_word(char *buffer, int buffer_size)
{
  printf("enter next word:\n  \e[5m>\e[25m ");

  fgets(buffer, BUFFER_SIZE, stdin);

  buffer[strcspn(buffer, "\r\n ")] = '\0'; /* trim trailing newline from input */
}


void insert_next(Node *node, const char *next_word, int level)
{
  int comparison;       /* integer result of alphabetical comparison 'strcomp' */
  Node **next_node_ptr; /* pointer to g either greater or less than 'node' */

  comparison = strcmp(next_word, node -> word);

  if (comparison < 0) {
    printf("next_word (%s) < node -> word (%s)\n", next_word, node -> word);
    next_node_ptr = &(node -> less_than);

  } else if (comparison > 0) {
    printf("next_word (%s) > node -> word (%s)\n", next_word, node -> word);
    next_node_ptr = &(node -> greater_than);

  } else {
    printf("next_word (%s) == node -> word (%s)\nskipping duplicate!\n", next_word, node -> word);
    return;
  }

  if (*next_node_ptr == NULL) {
    printf("allocating memory...\n");

    *next_node_ptr = malloc(NODE_SIZE);

    if (*next_node_ptr == NULL) {
      printf("\n\e[5m\e[31mERROR: OUT OF MEMORY\e[0m\n");
      exit(8);
    }

    strcpy((*next_node_ptr) -> word, next_word);
    (*next_node_ptr) -> less_than    = NULL;
    (*next_node_ptr) -> greater_than = NULL;

    printf("insert successful (%i levels deep)!\n", level);
    return;
  }

  insert_next(*next_node_ptr, next_word, ++level);
}


void print_next(int num_nodes, Node *nodes[], int total_column_width)
{
  int off_node;  /* node offset from left */
  int off_rel;   /* char offset from start of each 'nodespace' */
  int nodespace; /* cols available for each node */
  int word_len;  /* string length of 'node_word_ptr' */
  int lpad_len;  /* left pad length for 'node_word_ptr' */
  int off_word;  /* off_rel after 'node_word_ptr' */

  char line[total_column_width + 1]; /* buffer for terminal line including \0 */
  char *line_ptr;                    /* points to char at current line offset */
  char *node_word_ptr;               /* word of node at 'nodes[off_node]' */

  nodespace = total_column_width / num_nodes; /* allocate nodespace */
  line_ptr = line;                            /* set pointer to start of buffer */

  node_word_ptr = NULL;

  for (off_node = 0; off_node < num_nodes; ++off_node) {
    off_rel = 0;

    if (nodes[off_node] == NULL) {
      while (off_rel < nodespace) {
        *line_ptr = ' ';
        ++line_ptr;
        ++off_rel;
      }
      continue;
    }

    node_word_ptr = nodes[off_node] -> word;
    word_len      = strlen(node_word_ptr);

    lpad_len = (nodespace - word_len) / 2;
    off_word = word_len + lpad_len;

    while (off_rel < lpad_len) {
      *line_ptr = ' ';
      ++line_ptr;
      ++off_rel;
    }

    while (off_rel < off_word) {
      *line_ptr = *node_word_ptr;
      ++line_ptr;
      ++node_word_ptr;
      ++off_rel;
    }

    while (off_rel < nodespace) {
      *line_ptr = ' ';
      ++line_ptr;
      ++off_rel;
    }
  }

  if (node_word_ptr == NULL) {
    printf("\e[0m\n\ndone!\n");
    return;
  }

  *line_ptr = '\0';
  printf("%-*s", total_column_width, line);

  int next_num_nodes;   /* max possible number of children nodes of current gen */
  int off_lb;           /* char offset of left branch '/' rel start of 'nodespace' */
  int off_rb;           /* char offset of right branch '/' rel start of 'nodespace' */

  Node **next_nodes_ptr; /* points to child node at current child node offset */

  next_num_nodes = 2 * num_nodes;
  off_lb         = (nodespace / 3) - 1;
  off_rb         = (2 * off_lb) + 1;

  Node *next_nodes[next_num_nodes];
  next_nodes_ptr = next_nodes; /* set pointer to start of node buffer */
  line_ptr = line;             /* set pointer to start of line buffer */

  for (off_node = 0; off_node < num_nodes; ++off_node) {
    off_rel = 0;

    if (nodes[off_node] == NULL) {
      while (off_rel < nodespace) {
        *line_ptr = ' ';
        ++line_ptr;
        ++off_rel;
      }

      *next_nodes_ptr = NULL;
      ++next_nodes_ptr;
      *next_nodes_ptr = NULL;
      ++next_nodes_ptr;
      continue;
    }

    while (off_rel < off_lb) {
      *line_ptr = ' ';
      ++line_ptr;
      ++off_rel;
    }

    *next_nodes_ptr = nodes[off_node] -> less_than;
    *line_ptr       = (*next_nodes_ptr == NULL) ? ' ' : '/';
    ++line_ptr;
    ++next_nodes_ptr;
    ++off_rel;

    while (off_rel < off_rb) {
      *line_ptr = ' ';
      ++line_ptr;
      ++off_rel;
    }

    *next_nodes_ptr = nodes[off_node] -> greater_than;
    *line_ptr       = (*next_nodes_ptr == NULL) ? ' ' : '\\';
    ++line_ptr;
    ++next_nodes_ptr;
    ++off_rel;

    while (off_rel < nodespace) {
      *line_ptr = ' ';
      ++line_ptr;
      ++off_rel;
    }
  }

  *line_ptr = '\0';
  printf("%-*s", total_column_width, line);

  print_next(next_num_nodes, next_nodes, total_column_width);

